name: üêò Gradle dependency signatures

on:
  workflow_dispatch:
    inputs:
      ref:
        description: PR number, branch, or url
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  gradle-dependency-signatures:
    if: contains(fromJson(vars.AUTHORIZED_ACTORS || '[]'), github.actor)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: setup-bot
        uses: ./.github/actions/setup-bot
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          token: ${{ steps.setup-bot.outputs.token }}
      - if: inputs.ref != ''
        run: gh pr checkout "$INPUT_REF"
        env:
          INPUT_REF: ${{ inputs.ref }}
          GH_TOKEN: ${{ steps.setup-bot.outputs.token }}

      - uses: ./.github/actions/setup-java
      - uses: ./.github/actions/setup-gradle
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      - uses: ./.github/actions/setup-gradle-properties

      - run: ./gradlew --write-verification-metadata pgp,sha256 --export-keys
      - run: |
          # Remove unnecessary version attributes from trusted-key entries
          sed -i 's/<trusted-key\(.*\) version="[^"]*"/<trusted-key\1/g' gradle/verification-metadata.xml

          if ! git diff --quiet --exit-code -- 'gradle/verification-keyring.keys' 'gradle/verification-metadata.xml';
          then
            git commit -m "ü§ñ Update Gradle dependency signatures" -- 'gradle/verification-keyring.keys' 'gradle/verification-metadata.xml'
            git show

            if [[ -z "${INPUT_REF}" ]]; then
              new_pr_branch="gradle-dependency-signatures/$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER"
              git switch --create "$new_pr_branch"
              git push origin "$new_pr_branch"
              gh pr create \
                --title "ü§ñ Update Gradle dependency signatures" --fill \
                --base "$GITHUB_REF_NAME" --head "$new_pr_branch" \
                --assignee "$GITHUB_TRIGGERING_ACTOR"
            else
              git push
            fi
            echo "::notice::UPDATED"
          else
            echo "::notice::UP-TO-DATE"
          fi
        env:
          INPUT_REF: ${{ inputs.ref }}
          GH_TOKEN: ${{ steps.setup-bot.outputs.token }}
